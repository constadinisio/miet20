package main.java.views.users.Attp.menu;

import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import main.java.database.Conexion;
import main.java.views.users.Attp.attp;

/**
 * Clase para gestión de inventario o stock de dispositivos.
 *
 * Funcionalidades principales: 
 * - Mostrar inventario de dispositivos 
 * - Registrar información de stock en archivo 
 * - Gestionar conexión a base de datos
 *
 * @author [División ATTP]
 * @version 1.0
 * @since [13/03/2025]
 */
public class Stock extends javax.swing.JFrame {

    // Conexión a la base de datos
    Connection conect;

    /**
     * Verifica la conexión a la base de datos.
     *
     * Utiliza el patrón Singleton para obtener la conexión. 
     * Muestra mensaje de error si no se puede establecer conexión.
     */
    private void probar_conexion() {
        // Obtener la conexión desde el Singleton
        conect = Conexion.getInstancia().verificarConexion();
        if (conect == null) {
            JOptionPane.showMessageDialog(this, "Error de conexión.");
        }
    }

    /**
     * Constructor de la interfaz de Stock.
     *
     * Inicializa componentes: 
     * - Componentes de interfaz gráfica 
     * - Carga de datos 
     * - Verificación de conexión
     */
    public Stock() {
        initComponents();
        mostrardatos();
        probar_conexion();
    }

    /**
     * Carga y muestra los datos de stock en la tabla.
     *
     * Pasos: 
     * - Crear modelo de tabla 
     * - Configurar columnas 
     * - Ejecutar consulta SQL para recuperar inventario 
     * - Añadir filas al modelo de tabla
     */
    public void mostrardatos() {
        probar_conexion();
        DefaultTableModel tablitastock = new DefaultTableModel();
        tablitastock.addColumn("ID");
        tablitastock.addColumn("Codigo de barras");
        tablitastock.addColumn("Estado");
        tablitastock.addColumn("Observaciones");
        Tablastock.setModel(tablitastock);
        Statement vertablastock;
        String[] datos_stock = new String[4];
        try {
            vertablastock = conect.createStatement();
            ResultSet mostrarstock = vertablastock.executeQuery("SELECT * FROM stock");
            while (mostrarstock.next()) {
                datos_stock[0] = mostrarstock.getString(1);
                datos_stock[1] = mostrarstock.getString(2);
                datos_stock[2] = mostrarstock.getString(3);
                datos_stock[3] = mostrarstock.getString(4);
                tablitastock.addRow(datos_stock);
            }
        } catch (SQLException e) {

        }

        Tablastock.setModel(tablitastock);
    }

    /**
     * Registra datos de stock en un archivo de texto.
     *
     * Procesos: 
     * - Consulta información de stock 
     * - Escribe datos en archivo de registro 
     * - Maneja posibles errores de escritura
     */
    public void RegistrosFichero() {
        Statement statement = null;
        try {
            statement = conect.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM stock");
            while (resultSet.next()) {
                String ID1 = resultSet.getString("ID");
                String Cod1 = resultSet.getString("Cod_Barra");
                String Estado1 = resultSet.getString("Estado");
                String Obser1 = resultSet.getString("Observaciones");

                try (FileWriter EscrituraInicial = new FileWriter("Registros.txt", true)) {
                    EscrituraInicial.write("\n");
                    EscrituraInicial.write("Datos iniciales: " + ID1 + "|" + Cod1 + "|" + Estado1 + "|" + Obser1);
                    EscrituraInicial.write("\n");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error al escribir en el archivo: " + e.getMessage());
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Stock.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tablastock = new javax.swing.JTable();
        Boton_Volver2 = new javax.swing.JButton();
        Boton_Modificar1 = new javax.swing.JToggleButton();
        Estado_JCombobox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Stocks de las computadoras");

        Tablastock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Tablastock.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                TablastockAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jScrollPane1.setViewportView(Tablastock);

        Boton_Volver2.setText("Volver");
        Boton_Volver2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_Volver2ActionPerformed(evt);
            }
        });

        Boton_Modificar1.setText("Modificar");
        Boton_Modificar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Boton_Modificar1ActionPerformed(evt);
            }
        });

        Estado_JCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "En uso", "Danada", "Hurto", "Obsoleta" }));
        Estado_JCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Estado_JComboboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 933, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(Estado_JCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(329, 329, 329)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(418, 418, 418)
                        .addComponent(Boton_Volver2)
                        .addGap(18, 18, 18)
                        .addComponent(Boton_Modificar1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Estado_JCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Boton_Volver2)
                    .addComponent(Boton_Modificar1)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Boton_Volver2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_Volver2ActionPerformed
        this.setVisible(false);
        attp Attp = new attp();
        Attp.setVisible(true);
    }//GEN-LAST:event_Boton_Volver2ActionPerformed

    private void TablastockAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_TablastockAncestorAdded
        mostrardatos();
    }//GEN-LAST:event_TablastockAncestorAdded

    private void Boton_Modificar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Boton_Modificar1ActionPerformed
        Statement statement = null;
        try {
            statement = conect.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT * FROM stock");
            while (resultSet.next()) {
                String ID1 = resultSet.getString("ID");
                String Cod1 = resultSet.getString("Cod_Barra");
                String Estado1 = resultSet.getString("Estado");
                String Obser1 = resultSet.getString("Observaciones");

                try (FileWriter EscrituraInicial = new FileWriter("Registros.txt", true)) {
                    EscrituraInicial.write("\n");
                    EscrituraInicial.write("Datos iniciales de stock: " + ID1 + "|" + Cod1 + "|" + Estado1 + "|" + Obser1);
                    EscrituraInicial.write("\n");
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error al escribir en el archivo: " + e.getMessage());
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Stock.class.getName()).log(Level.SEVERE, null, ex);
        }

        int fila = Tablastock.getSelectedRow();
        if (fila < 0) {
            JOptionPane.showMessageDialog(null, "Seleccione el registro antes de apretar el botón");
        }

        String ID = Tablastock.getValueAt(fila, 0).toString();
        String Cod = Tablastock.getValueAt(fila, 1).toString();
        String Estado = Tablastock.getValueAt(fila, 2).toString();
        String Obser = Tablastock.getValueAt(fila, 3).toString();
        try {

            PreparedStatement actu = conect.prepareStatement("UPDATE stock SET ID='" + ID + "',Observaciones='" + Obser + "'WHERE Cod_Barra='" + Cod + "'");
            actu.executeUpdate();
            mostrardatos();

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, e + "No se pudo actualizar los datos");
        }
        if (fila < 0) {
            JOptionPane.showMessageDialog(null, "Seleccione el registro antes de apretar el botón");
        } else {
            JOptionPane.showMessageDialog(null, "¡Registro actualizado!");
        }
        try (FileWriter Escritura = new FileWriter("Registros.txt", true)) {
            Escritura.write("\n");
            String ID2 = Tablastock.getValueAt(fila, 0).toString();
            String Cod2 = Tablastock.getValueAt(fila, 1).toString();
            String Estado2 = Tablastock.getValueAt(fila, 2).toString();
            String Obser2 = Tablastock.getValueAt(fila, 3).toString();
            String Registro2 = ("Datos finales de stock: " + ID2 + "|" + Cod2 + "|" + Estado + "|" + "|" + Obser2);
            Escritura.write(Registro2);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al escribir en el archivo: " + e.getMessage());
        }

    }//GEN-LAST:event_Boton_Modificar1ActionPerformed

    private void Estado_JComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Estado_JComboboxActionPerformed
        String Item = Estado_JCombobox.getSelectedItem().toString();
        int fila = Tablastock.getSelectedRow();
        if (fila < 0) {
            JOptionPane.showMessageDialog(null, "Seleccione un registro de la tabla antes de cambiar el estado.");
            return;
        }
        String Cod = Tablastock.getValueAt(fila, 1).toString();
        PreparedStatement actu;
        try {
            actu = conect.prepareStatement("UPDATE stock SET Estado='" + Item + "' WHERE Cod_Barra='" + Cod + "'");
            actu.executeUpdate();
            mostrardatos();
        } catch (SQLException ex) {
            Logger.getLogger(Stock.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error al actualizar el estado: " + ex.getMessage());
        }

    }//GEN-LAST:event_Estado_JComboboxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Stock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Stock().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Boton_Modificar1;
    private javax.swing.JButton Boton_Volver2;
    private javax.swing.JComboBox<String> Estado_JCombobox;
    private javax.swing.JTable Tablastock;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

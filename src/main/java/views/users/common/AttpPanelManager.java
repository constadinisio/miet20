package main.java.views.users.common;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import main.java.views.users.Attp.menu.NetbookRegistrationPanel;
import main.java.views.users.Attp.menu.PrestamosPanel;
import main.java.views.users.Attp.menu.RegistrosPanel;
import main.java.views.users.Attp.menu.StockPanel;
import main.java.services.NotificationCore.NotificationIntegrationUtil;

/**
 * Gestor de paneles espec√≠fico para el rol de ATTP (Auxiliar T√©cnico en Tecnolog√≠as de la Producci√≥n).
 * VERSI√ìN COMPLETA MEJORADA CON SISTEMA DE NOTIFICACIONES INTEGRADO
 * 
 * Funcionalidades del ATTP:
 * - Gesti√≥n completa de stock de equipos t√©cnicos
 * - Control de pr√©stamos de netbooks y equipamiento
 * - Registro y seguimiento de equipos
 * - Administraci√≥n de netbooks institucionales
 * - Reportes y auditor√≠as de equipamiento
 * 
 * Sistema de Notificaciones Autom√°ticas:
 * - Notifica a estudiantes sobre nuevos pr√©stamos
 * - Alerta sobre devoluciones vencidas
 * - Informa sobre problemas con equipos
 * - Notifica sobre cambios en stock
 * - Reportes de actividad a administradores
 * 
 * @author Sistema de Gesti√≥n Escolar ET20
 * @version 2.0 - Con Notificaciones Autom√°ticas Integradas
 */
public class AttpPanelManager implements RolPanelManager {

    private final VentanaInicio ventana;
    private final int attpId;
    private final NotificationIntegrationUtil notificationUtil;

    // Control de estado para notificaciones autom√°ticas
    private boolean notificationsEnabled = true;
    private long lastNotificationTime = 0;
    private static final long NOTIFICATION_COOLDOWN = 1500; // 1.5 segundos entre notificaciones

    // Estad√≠sticas para reportes autom√°ticos
    private int prestamosRealizadosHoy = 0;
    private int devolucionesVencidasDetectadas = 0;
    private int equiposConProblemasReportados = 0;

    public AttpPanelManager(VentanaInicio ventana, int userId) {
        this.ventana = ventana;
        this.attpId = userId;
        this.notificationUtil = NotificationIntegrationUtil.getInstance();
        
        System.out.println("=== ATTP PANEL MANAGER INICIALIZADO ===");
        System.out.println("ATTP ID: " + attpId);
        System.out.println("Sistema de notificaciones: " + (notificationUtil != null ? "‚úÖ ACTIVO" : "‚ùå INACTIVO"));
        
        // Verificar y configurar sistema de notificaciones
        inicializarSistemaNotificaciones();
        
        // Inicializar estad√≠sticas del d√≠a
        inicializarEstadisticasDiarias();
    }

    /**
     * NUEVO: Inicializa el sistema de notificaciones espec√≠fico para ATTP
     */
    private void inicializarSistemaNotificaciones() {
        if (notificationUtil != null) {
            boolean puedeEnviar = notificationUtil.puedeEnviarNotificaciones();
            System.out.println("Puede enviar notificaciones: " + (puedeEnviar ? "‚úÖ S√ç" : "‚ùå NO"));
            
            if (puedeEnviar) {
                // Enviar notificaci√≥n de inicio de sesi√≥n para ATTP
                enviarNotificacionInicioSesion();
                
                // Verificar equipos con problemas pendientes
                verificarEquiposPendientes();
            } else {
                System.err.println("‚ö†Ô∏è ATTP no tiene permisos para enviar notificaciones");
                notificationsEnabled = false;
            }
        } else {
            System.err.println("‚ùå Sistema de notificaciones no disponible para ATTP");
            notificationsEnabled = false;
        }
    }

    /**
     * NUEVO: Inicializa estad√≠sticas diarias
     */
    private void inicializarEstadisticasDiarias() {
        try {
            // Aqu√≠ podr√≠as consultar la BD para obtener estad√≠sticas del d√≠a actual
            // Por ahora, inicializamos en 0
            prestamosRealizadosHoy = 0;
            devolucionesVencidasDetectadas = 0;
            equiposConProblemasReportados = 0;
            
            System.out.println("üìä Estad√≠sticas ATTP inicializadas para el d√≠a");
        } catch (Exception e) {
            System.err.println("Error inicializando estad√≠sticas: " + e.getMessage());
        }
    }

    @Override
    public JComponent[] createButtons() {
        JButton btnStock = createStyledButton("STOCK", "stock");
        JButton btnPrestamos = createStyledButton("PR√âSTAMOS", "prestamos");
        JButton btnRegistros = createStyledButton("REGISTROS", "registros");
        JButton btnNetbooks = createStyledButton("NETBOOKS", "netbooks");

        return new JComponent[]{btnStock, btnPrestamos, btnRegistros, btnNetbooks};
    }

    private JButton createStyledButton(String text, String actionCommand) {
        JButton button = new JButton(text);
        button.setBackground(new Color(51, 153, 255));
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setForeground(Color.WHITE);
        button.setActionCommand(actionCommand);
        button.addActionListener(e -> handleButtonAction(e.getActionCommand()));

        button.setMaximumSize(new Dimension(195, 40));
        button.setPreferredSize(new Dimension(195, 40));

        return button;
    }

    @Override
    public void handleButtonAction(String actionCommand) {
        try {
            System.out.println("=== ACCI√ìN ATTP: " + actionCommand + " ===");
            
            // Registrar actividad para reportes
            registrarActividadATTP(actionCommand);
            
            switch (actionCommand) {
                case "stock":
                    mostrarPanelStock();
                    break;
                case "prestamos":
                    mostrarPanelPrestamos();
                    break;
                case "registros":
                    mostrarPanelRegistros();
                    break;
                case "netbooks":
                    mostrarPanelNetbooks();
                    break;
                default:
                    ventana.restaurarVistaPrincipal();
                    break;
            }
        } catch (Exception ex) {
            System.err.println("‚ùå Error al procesar acci√≥n ATTP: " + ex.getMessage());
            ex.printStackTrace();
            
            // Notificar error a administradores
            notificarErrorSistema(actionCommand, ex.getMessage());
            
            JOptionPane.showMessageDialog(ventana,
                    "Error al procesar la acci√≥n: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            ventana.restaurarVistaPrincipal();
        }
    }

    /**
     * M√âTODO MEJORADO: Muestra el panel de stock con notificaciones autom√°ticas
     */
    private void mostrarPanelStock() {
        try {
            System.out.println("Creando StockPanel con notificaciones...");
            StockPanel panel = new StockPanel(ventana, attpId);
            
            // NUEVO: Configurar callbacks de notificaci√≥n en el panel
            configurarNotificacionesStock(panel);
            
            ventana.mostrarPanelResponsive(panel, "Gesti√≥n de Stock");
            System.out.println("‚úÖ StockPanel cargado exitosamente");

            // Notificar apertura de m√≥dulo de stock
            enviarNotificacionModuloAbierto("Stock", "Gesti√≥n de inventario y equipamiento");

        } catch (Exception ex) {
            System.err.println("‚ùå Error al cargar StockPanel: " + ex.getMessage());
            ex.printStackTrace();
            throw ex;
        }
    }

    /**
     * M√âTODO MEJORADO: Muestra el panel de pr√©stamos con notificaciones
     */
    private void mostrarPanelPrestamos() {
        try {
            System.out.println("Creando PrestamosPanel con notificaciones...");
            PrestamosPanel panel = new PrestamosPanel(ventana, attpId);
            
            // NUEVO: Configurar callbacks de notificaci√≥n en el panel
            configurarNotificacionesPrestamos(panel);
            
            ventana.mostrarPanelResponsive(panel, "Gesti√≥n de Pr√©stamos");
            System.out.println("‚úÖ PrestamosPanel cargado exitosamente");

            // Notificar apertura y verificar pr√©stamos vencidos
            enviarNotificacionModuloAbierto("Pr√©stamos", "Control de equipos prestados");
            verificarPrestamosVencidos();

        } catch (Exception ex) {
            System.err.println("‚ùå Error al cargar PrestamosPanel: " + ex.getMessage());
            ex.printStackTrace();
            throw ex;
        }
    }

    /**
     * M√âTODO MEJORADO: Muestra el panel de registros con seguimiento
     */
    private void mostrarPanelRegistros() {
        try {
            System.out.println("Creando RegistrosPanel con seguimiento...");
            RegistrosPanel panel = new RegistrosPanel(ventana, attpId);
            
            // NUEVO: Configurar seguimiento de registros
            configurarSeguimientoRegistros(panel);
            
            ventana.mostrarPanelResponsive(panel, "Registros del Sistema");
            System.out.println("‚úÖ RegistrosPanel cargado exitosamente");

            // Generar reporte de actividad diaria
            generarReporteActividadDiaria();

        } catch (Exception ex) {
            System.err.println("‚ùå Error al cargar RegistrosPanel: " + ex.getMessage());
            ex.printStackTrace();
            throw ex;
        }
    }

    /**
     * M√âTODO MEJORADO: Muestra el panel de netbooks con control avanzado
     */
    private void mostrarPanelNetbooks() {
        try {
            System.out.println("Creando NetbookRegistrationPanel con control avanzado...");
            NetbookRegistrationPanel panel = new NetbookRegistrationPanel(ventana, attpId);
            
            // NUEVO: Configurar control avanzado de netbooks
            configurarControlNetbooks(panel);
            
            ventana.mostrarPanelResponsive(panel, "Registro de Netbooks");
            System.out.println("‚úÖ NetbookRegistrationPanel cargado exitosamente");

            // Verificar estado de netbooks
            verificarEstadoNetbooks();

        } catch (Exception ex) {
            System.err.println("‚ùå Error al cargar NetbookRegistrationPanel: " + ex.getMessage());
            ex.printStackTrace();
            throw ex;
        }
    }

    // ========================================
    // M√âTODOS DE NOTIFICACIONES ESPEC√çFICAS ATTP
    // ========================================

    /**
     * NUEVO: Env√≠a notificaci√≥n de inicio de sesi√≥n
     */
    private void enviarNotificacionInicioSesion() {
        if (!canSendNotification()) return;
        
        try {
            String titulo = "üîß ATTP - Sesi√≥n Iniciada";
            String contenido = String.format(
                "Sistema ATTP activado correctamente.\n\n" +
                "üë®‚Äçüîß Responsable: %s\n" +
                "üïê Hora de inicio: %s\n" +
                "üìã M√≥dulos disponibles:\n" +
                "‚Ä¢ Gesti√≥n de Stock\n" +
                "‚Ä¢ Control de Pr√©stamos\n" +
                "‚Ä¢ Registro de Equipos\n" +
                "‚Ä¢ Administraci√≥n de Netbooks\n\n" +
                "¬°Listo para gestionar el equipamiento t√©cnico!",
                "ATTP #" + attpId,
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss")
                )
            );
            
            notificationUtil.enviarNotificacionBasica(titulo, contenido, attpId);
            System.out.println("‚úÖ Notificaci√≥n de inicio de sesi√≥n ATTP enviada");
            
        } catch (Exception e) {
            System.err.println("Error enviando notificaci√≥n de inicio: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Notifica cuando se abre un m√≥dulo espec√≠fico
     */
    private void enviarNotificacionModuloAbierto(String modulo, String descripcion) {
        if (!canSendNotification()) return;
        
        try {
            String titulo = "üìÇ M√≥dulo " + modulo + " Activado";
            String contenido = String.format(
                "M√≥dulo %s iniciado correctamente.\n\n" +
                "üìù Descripci√≥n: %s\n" +
                "üë®‚Äçüîß ATTP: #%d\n" +
                "üïê Hora: %s\n\n" +
                "Sistema listo para operar.",
                modulo, descripcion, attpId,
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("HH:mm")
                )
            );
            
            // Enviar solo al ATTP actual (notificaci√≥n personal)
            notificationUtil.enviarNotificacionBasica(titulo, contenido, attpId);
            
        } catch (Exception e) {
            System.err.println("Error notificando m√≥dulo abierto: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo p√∫blico para notificar nuevo pr√©stamo (llamado desde PrestamosPanel)
     */
    public void notificarNuevoPrestamo(int alumnoId, String equipoNombre, String fechaDevolucion) {
        if (!canSendNotification()) return;
        
        try {
            prestamosRealizadosHoy++;
            
            // Usar la utilidad espec√≠fica para pr√©stamos
            notificationUtil.notificarNuevoPrestamo(alumnoId, equipoNombre, fechaDevolucion, attpId);
            
            System.out.println("‚úÖ Notificaci√≥n de pr√©stamo enviada - Equipo: " + equipoNombre);
            
            // Notificar a administradores si es un equipo de alto valor
            if (esEquipoAltoValor(equipoNombre)) {
                notificarPrestamoEquipoValioso(alumnoId, equipoNombre);
            }
            
        } catch (Exception e) {
            System.err.println("Error notificando nuevo pr√©stamo: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo p√∫blico para notificar devoluci√≥n vencida
     */
    public void notificarDevolucionVencida(int alumnoId, String equipoNombre, String fechaVencimiento, int diasVencidos) {
        if (!canSendNotification()) return;
        
        try {
            devolucionesVencidasDetectadas++;
            
            // Usar la utilidad espec√≠fica para devoluciones vencidas
            notificationUtil.notificarDevolucionVencida(alumnoId, equipoNombre, fechaVencimiento, diasVencidos);
            
            System.out.println("‚ö†Ô∏è Notificaci√≥n de devoluci√≥n vencida enviada - D√≠as: " + diasVencidos);
            
            // Si est√° muy vencido, notificar tambi√©n a preceptores
            if (diasVencidos > 7) {
                notificarDevolucionCritica(alumnoId, equipoNombre, diasVencidos);
            }
            
        } catch (Exception e) {
            System.err.println("Error notificando devoluci√≥n vencida: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo p√∫blico para notificar problema con equipo
     */
    public void notificarProblemaEquipo(int alumnoId, String equipoNombre, String descripcionProblema) {
        if (!canSendNotification()) return;
        
        try {
            equiposConProblemasReportados++;
            
            String titulo = "‚ö†Ô∏è Problema con Equipo";
            String contenido = String.format(
                "Se ha reportado un problema con un equipo prestado:\n\n" +
                "üíª Equipo: %s\n" +
                "‚ùå Problema: %s\n" +
                "üë®‚Äçüéì Alumno: ID #%d\n" +
                "üë®‚Äçüîß Reportado por: ATTP #%d\n" +
                "üìÖ Fecha: %s\n\n" +
                "üö® ACCI√ìN REQUERIDA:\n" +
                "‚Ä¢ Contactar al alumno inmediatamente\n" +
                "‚Ä¢ Evaluar el da√±o del equipo\n" +
                "‚Ä¢ Determinar responsabilidades\n\n" +
                "Por favor, reportarse al ATTP lo antes posible.",
                equipoNombre, descripcionProblema, alumnoId, attpId,
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")
                )
            );
            
            // Notificar al alumno
            notificationUtil.enviarNotificacionUrgente(titulo, contenido, alumnoId);
            
            // Notificar tambi√©n a administradores
            notificationUtil.enviarNotificacionARol(
                "üîß ATTP - Problema de Equipo",
                "Se report√≥ un problema con equipo prestado. Equipo: " + equipoNombre + ". Revisar detalles en el sistema.",
                1 // Administradores
            );
            
            System.out.println("üö® Notificaci√≥n de problema de equipo enviada");
            
        } catch (Exception e) {
            System.err.println("Error notificando problema de equipo: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo p√∫blico para notificar cambio en stock
     */
    public void notificarCambioStock(String equipoNombre, String tipoMovimiento, int cantidad, String motivo) {
        if (!canSendNotification()) return;
        
        try {
            String emoji = tipoMovimiento.equalsIgnoreCase("entrada") ? "üìà" : "üìâ";
            String titulo = emoji + " Movimiento de Stock";
            String contenido = String.format(
                "Registro de movimiento en inventario:\n\n" +
                "üì¶ Equipo: %s\n" +
                "%s Tipo: %s\n" +
                "üî¢ Cantidad: %d unidades\n" +
                "üìù Motivo: %s\n" +
                "üë®‚Äçüîß ATTP: #%d\n" +
                "üìÖ Fecha: %s\n\n" +
                "Stock actualizado correctamente.",
                equipoNombre, emoji, tipoMovimiento, cantidad, motivo, attpId,
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")
                )
            );
            
            // Notificar solo a administradores (control de inventario)
            notificationUtil.enviarNotificacionARol(titulo, contenido, 1);
            
            System.out.println("üì¶ Notificaci√≥n de cambio de stock enviada");
            
        } catch (Exception e) {
            System.err.println("Error notificando cambio de stock: " + e.getMessage());
        }
    }

    // ========================================
    // M√âTODOS DE CONFIGURACI√ìN DE PANELES
    // ========================================

    /**
     * NUEVO: Configura notificaciones autom√°ticas para StockPanel
     */
    private void configurarNotificacionesStock(StockPanel panel) {
        try {
            // Aqu√≠ configurar√≠as callbacks en el panel de stock
            // Por ejemplo, cuando se agregue/quite stock
            System.out.println("üìã Configurando notificaciones autom√°ticas para Stock");
            
            // Ejemplo de c√≥mo podr√≠as configurar callbacks:
            // panel.setOnStockChangeCallback(this::notificarCambioStock);
            
        } catch (Exception e) {
            System.err.println("Error configurando notificaciones de stock: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Configura notificaciones autom√°ticas para PrestamosPanel
     */
    private void configurarNotificacionesPrestamos(PrestamosPanel panel) {
        try {
            System.out.println("üíª Configurando notificaciones autom√°ticas para Pr√©stamos");
            
            // Ejemplo de callbacks que podr√≠as configurar:
            // panel.setOnPrestamoCallback(this::notificarNuevoPrestamo);
            // panel.setOnDevolucionVencidaCallback(this::notificarDevolucionVencida);
            // panel.setOnProblemaEquipoCallback(this::notificarProblemaEquipo);
            
        } catch (Exception e) {
            System.err.println("Error configurando notificaciones de pr√©stamos: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Configura seguimiento de RegistrosPanel
     */
    private void configurarSeguimientoRegistros(RegistrosPanel panel) {
        try {
            System.out.println("üìä Configurando seguimiento autom√°tico de Registros");
            
            // Configurar callbacks para auditor√≠a
            // panel.setOnRegistroCallback(this::registrarActividad);
            
        } catch (Exception e) {
            System.err.println("Error configurando seguimiento de registros: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Configura control avanzado de NetbookRegistrationPanel
     */
    private void configurarControlNetbooks(NetbookRegistrationPanel panel) {
        try {
            System.out.println("üíª Configurando control avanzado de Netbooks");
            
            // Configurar callbacks espec√≠ficos para netbooks
            // panel.setOnNetbookRegistradaCallback(this::notificarNuevaNetbook);
            // panel.setOnNetbookProblemaCallback(this::notificarProblemaNetbook);
            
        } catch (Exception e) {
            System.err.println("Error configurando control de netbooks: " + e.getMessage());
        }
    }

    // ========================================
    // M√âTODOS DE VERIFICACI√ìN Y CONTROL
    // ========================================

    /**
     * NUEVO: Verifica equipos con problemas pendientes
     */
    private void verificarEquiposPendientes() {
        try {
            // Aqu√≠ har√≠as consulta a BD para verificar equipos con problemas
            // Por ahora simulamos
            System.out.println("üîç Verificando equipos con problemas pendientes...");
            
            // Ejemplo: si hay equipos pendientes, notificar
            int equiposPendientes = obtenerEquiposPendientes();
            if (equiposPendientes > 0) {
                notificarEquiposPendientes(equiposPendientes);
            }
            
        } catch (Exception e) {
            System.err.println("Error verificando equipos pendientes: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Verifica pr√©stamos vencidos al abrir el m√≥dulo
     */
    private void verificarPrestamosVencidos() {
        try {
            System.out.println("‚è∞ Verificando pr√©stamos vencidos...");
            
            // Simulaci√≥n de verificaci√≥n
            int prestamosVencidos = obtenerPrestamosVencidos();
            if (prestamosVencidos > 0) {
                notificarPrestamosVencidosDetectados(prestamosVencidos);
            }
            
        } catch (Exception e) {
            System.err.println("Error verificando pr√©stamos vencidos: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Verifica estado general de netbooks
     */
    private void verificarEstadoNetbooks() {
        try {
            System.out.println("üíª Verificando estado de netbooks...");
            
            // Simulaci√≥n de verificaci√≥n
            int netbooksProblemas = obtenerNetbooksConProblemas();
            if (netbooksProblemas > 0) {
                notificarNetbooksConProblemas(netbooksProblemas);
            }
            
        } catch (Exception e) {
            System.err.println("Error verificando estado de netbooks: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Genera reporte de actividad diaria
     */
    private void generarReporteActividadDiaria() {
        if (!canSendNotification()) return;
        
        try {
            String titulo = "üìä Reporte Diario ATTP";
            String contenido = String.format(
                "Resumen de actividades del d√≠a:\n\n" +
                "üìà ESTAD√çSTICAS:\n" +
                "‚Ä¢ Pr√©stamos realizados: %d\n" +
                "‚Ä¢ Devoluciones vencidas: %d\n" +
                "‚Ä¢ Equipos con problemas: %d\n\n" +
                "üë®‚Äçüîß ATTP: #%d\n" +
                "üìÖ Fecha: %s\n\n" +
                "Reporte generado autom√°ticamente.",
                prestamosRealizadosHoy,
                devolucionesVencidasDetectadas,
                equiposConProblemasReportados,
                attpId,
                java.time.LocalDate.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy")
                )
            );
            
            // Enviar reporte a administradores
            notificationUtil.enviarNotificacionARol(titulo, contenido, 1);
            
            System.out.println("üìä Reporte diario generado y enviado");
            
        } catch (Exception e) {
            System.err.println("Error generando reporte diario: " + e.getMessage());
        }
    }

    // ========================================
    // M√âTODOS AUXILIARES Y UTILITARIOS
    // ========================================

    /**
     * NUEVO: Registra actividad del ATTP para auditor√≠a
     */
    private void registrarActividadATTP(String accion) {
        try {
            System.out.println("üìù Registrando actividad ATTP: " + accion);
            
            // Aqu√≠ podr√≠as guardar en BD la actividad
            // Por ahora solo log
            
        } catch (Exception e) {
            System.err.println("Error registrando actividad: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Notifica errores del sistema a administradores
     */
    private void notificarErrorSistema(String accion, String error) {
        if (!canSendNotification()) return;
        
        try {
            String titulo = "üö® Error Sistema ATTP";
            String contenido = String.format(
                "Se ha producido un error en el sistema ATTP:\n\n" +
                "‚ùå Acci√≥n: %s\n" +
                "üìù Error: %s\n" +
                "üë®‚Äçüîß ATTP: #%d\n" +
                "üïê Hora: %s\n\n" +
                "Se requiere revisi√≥n del sistema.",
                accion, error, attpId,
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss")
                )
            );
            
            notificationUtil.enviarNotificacionUrgente(titulo, contenido, 1); // A admin
            
        } catch (Exception e) {
            System.err.println("Error notificando error de sistema: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Verifica si puede enviar notificaci√≥n (control de spam)
     */
    private boolean canSendNotification() {
        if (!notificationsEnabled || notificationUtil == null) {
            return false;
        }
        
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastNotificationTime < NOTIFICATION_COOLDOWN) {
            return false;
        }
        
        lastNotificationTime = currentTime;
        return true;
    }

    /**
     * NUEVO: Determina si un equipo es de alto valor
     */
    private boolean esEquipoAltoValor(String equipoNombre) {
        String nombre = equipoNombre.toLowerCase();
        return nombre.contains("netbook") || 
               nombre.contains("laptop") || 
               nombre.contains("proyector") ||
               nombre.contains("servidor") ||
               nombre.contains("router");
    }

    // ========================================
    // M√âTODOS DE SIMULACI√ìN (REEMPLAZAR CON CONSULTAS BD)
    // ========================================

    private int obtenerEquiposPendientes() {
        // Simular consulta a BD
        return (int) (Math.random() * 3); // 0-2 equipos pendientes
    }

    private int obtenerPrestamosVencidos() {
        // Simular consulta a BD
        return (int) (Math.random() * 5); // 0-4 pr√©stamos vencidos
    }

    private int obtenerNetbooksConProblemas() {
        // Simular consulta a BD
        return (int) (Math.random() * 2); // 0-1 netbooks con problemas
    }

    // ========================================
    // M√âTODOS ESPEC√çFICOS DE NOTIFICACI√ìN
    // ========================================

    private void notificarPrestamoEquipoValioso(int alumnoId, String equipoNombre) {
        String titulo = "üíé Pr√©stamo Equipo Valioso";
        String contenido = String.format(
            "ATENCI√ìN: Se ha prestado un equipo de alto valor.\n\n" +
            "üíª Equipo: %s\n" +
            "üë®‚Äçüéì Alumno ID: %d\n" +
            "üë®‚Äçüîß ATTP: #%d\n" +
            "üìÖ Fecha: %s\n\n" +
            "‚ö†Ô∏è SUPERVISI√ìN ESPECIAL REQUERIDA\n" +
            "Este equipo requiere seguimiento adicional.",
            equipoNombre, alumnoId, attpId,
            java.time.LocalDateTime.now().format(
                java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")
            )
        );
        
        notificationUtil.enviarNotificacionARol(titulo, contenido, 1); // Solo a administradores
    }

    private void notificarDevolucionCritica(int alumnoId, String equipoNombre, int diasVencidos) {
        String titulo = "üö® Devoluci√≥n CR√çTICA";
        String contenido = String.format(
            "URGENTE: Devoluci√≥n con retraso cr√≠tico.\n\n" +
            "üíª Equipo: %s\n" +
            "üë®‚Äçüéì Alumno ID: %d\n" +
            "‚è∞ D√≠as vencidos: %d\n" +
            "üë®‚Äçüîß ATTP: #%d\n\n" +
            "üö® ACCI√ìN INMEDIATA REQUERIDA:\n" +
            "‚Ä¢ Contactar al alumno urgentemente\n" +
            "‚Ä¢ Notificar a preceptor√≠a\n" +
            "‚Ä¢ Evaluar sanciones acad√©micas\n\n" +
            "Este caso requiere intervenci√≥n de preceptor√≠a.",
            equipoNombre, alumnoId, diasVencidos, attpId
        );
        
        // Notificar a preceptores (rol 2)
        notificationUtil.enviarNotificacionUrgente(titulo, contenido, 2);
    }

    private void notificarEquiposPendientes(int cantidad) {
        String titulo = "üîß Equipos Pendientes de Revisi√≥n";
        String contenido = String.format(
            "Hay equipos que requieren atenci√≥n:\n\n" +
            "‚ö†Ô∏è Equipos pendientes: %d\n" +
            "üë®‚Äçüîß ATTP: #%d\n" +
            "üìÖ Fecha: %s\n\n" +
            "Recomendaci√≥n: Revisar estado de equipos\n" +
            "reportados con problemas.",
            cantidad, attpId,
            java.time.LocalDate.now().format(
                java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy")
            )
        );
        
        notificationUtil.enviarNotificacionBasica(titulo, contenido, attpId);
    }

    private void notificarPrestamosVencidosDetectados(int cantidad) {
        String titulo = "‚è∞ Pr√©stamos Vencidos Detectados";
        String contenido = String.format(
            "Se detectaron pr√©stamos con retraso:\n\n" +
            "üìä Total vencidos: %d\n" +
            "üë®‚Äçüîß ATTP: #%d\n" +
            "üïê Hora: %s\n\n" +
            "üí° ACCIONES RECOMENDADAS:\n" +
            "‚Ä¢ Contactar a los alumnos\n" +
            "‚Ä¢ Verificar estado de equipos\n" +
            "‚Ä¢ Aplicar procedimientos de recuperaci√≥n\n\n" +
            "Revisar lista completa en el m√≥dulo de Pr√©stamos.",
            cantidad, attpId,
            java.time.LocalDateTime.now().format(
                java.time.format.DateTimeFormatter.ofPattern("HH:mm")
            )
        );
        
        // Notificar al ATTP actual y a administradores
        notificationUtil.enviarNotificacionBasica(titulo, contenido, attpId);
        notificationUtil.enviarNotificacionARol(
            "üìä ATTP - Pr√©stamos Vencidos", 
            "ATTP #" + attpId + " detect√≥ " + cantidad + " pr√©stamos vencidos. Revisar situaci√≥n.", 
            1
        );
    }

    private void notificarNetbooksConProblemas(int cantidad) {
        String titulo = "üíª Netbooks con Problemas";
        String contenido = String.format(
            "Se detectaron netbooks que requieren atenci√≥n:\n\n" +
            "‚ö†Ô∏è Netbooks afectadas: %d\n" +
            "üë®‚Äçüîß ATTP: #%d\n" +
            "üìÖ Fecha: %s\n\n" +
            "üîß REVISI√ìN T√âCNICA NECESARIA:\n" +
            "‚Ä¢ Diagn√≥stico de hardware\n" +
            "‚Ä¢ Verificaci√≥n de software\n" +
            "‚Ä¢ Evaluaci√≥n de reparaciones\n\n" +
            "Acceder al m√≥dulo de Netbooks para m√°s detalles.",
            cantidad, attpId,
            java.time.LocalDate.now().format(
                java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy")
            )
        );
        
        notificationUtil.enviarNotificacionBasica(titulo, contenido, attpId);
    }

    // ========================================
    // M√âTODOS P√öBLICOS PARA INTEGRACI√ìN CON PANELES
    // ========================================

    /**
     * NUEVO: M√©todo p√∫blico para que los paneles notifiquen eventos
     */
    public void notificarEventoGenerico(String tipoEvento, String descripcion, int usuarioAfectado) {
        if (!canSendNotification()) return;
        
        try {
            String emoji = obtenerEmojiPorTipoEvento(tipoEvento);
            String titulo = emoji + " " + tipoEvento;
            String contenido = String.format(
                "Evento registrado en sistema ATTP:\n\n" +
                "üìã Tipo: %s\n" +
                "üìù Descripci√≥n: %s\n" +
                "üë§ Usuario afectado: #%d\n" +
                "üë®‚Äçüîß ATTP: #%d\n" +
                "üïê Hora: %s\n\n" +
                "Evento procesado correctamente.",
                tipoEvento, descripcion, usuarioAfectado, attpId,
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss")
                )
            );
            
            if (usuarioAfectado > 0) {
                notificationUtil.enviarNotificacionBasica(titulo, contenido, usuarioAfectado);
            }
            
        } catch (Exception e) {
            System.err.println("Error notificando evento gen√©rico: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo para notificar mantenimiento de equipos
     */
    public void notificarMantenimientoEquipo(String equipoNombre, String tipoMantenimiento, String resultado) {
        if (!canSendNotification()) return;
        
        try {
            String titulo = "üîß Mantenimiento de Equipo";
            String contenido = String.format(
                "Mantenimiento realizado:\n\n" +
                "üì¶ Equipo: %s\n" +
                "üîß Tipo: %s\n" +
                "‚úÖ Resultado: %s\n" +
                "üë®‚Äçüîß ATTP: #%d\n" +
                "üìÖ Fecha: %s\n\n" +
                "Registro de mantenimiento completado.",
                equipoNombre, tipoMantenimiento, resultado, attpId,
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")
                )
            );
            
            // Notificar a administradores para registro
            notificationUtil.enviarNotificacionARol(titulo, contenido, 1);
            
        } catch (Exception e) {
            System.err.println("Error notificando mantenimiento: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo para notificar ingreso de nuevo equipamiento
     */
    public void notificarNuevoEquipamiento(String equipoNombre, int cantidad, String proveedor) {
        if (!canSendNotification()) return;
        
        try {
            String titulo = "üì¶ Nuevo Equipamiento Ingresado";
            String contenido = String.format(
                "Nuevo equipamiento agregado al inventario:\n\n" +
                "üì¶ Equipo: %s\n" +
                "üî¢ Cantidad: %d unidades\n" +
                "üè¢ Proveedor: %s\n" +
                "üë®‚Äçüîß ATTP: #%d\n" +
                "üìÖ Fecha: %s\n\n" +
                "‚úÖ Stock actualizado correctamente.\n" +
                "El equipamiento est√° disponible para pr√©stamo.",
                equipoNombre, cantidad, proveedor, attpId,
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")
                )
            );
            
            // Notificar a administradores y otros ATTPs
            notificationUtil.enviarNotificacionARol(titulo, contenido, 1); // Administradores
            notificationUtil.enviarNotificacionARol(titulo, contenido, 5); // Otros ATTPs
            
        } catch (Exception e) {
            System.err.println("Error notificando nuevo equipamiento: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo para generar alerta de stock bajo
     */
    public void notificarStockBajo(String equipoNombre, int cantidadRestante, int minimoRequerido) {
        if (!canSendNotification()) return;
        
        try {
            String titulo = "‚ö†Ô∏è ALERTA: Stock Bajo";
            String contenido = String.format(
                "ATENCI√ìN: Stock por debajo del m√≠nimo.\n\n" +
                "üì¶ Equipo: %s\n" +
                "üìä Stock actual: %d unidades\n" +
                "üéØ M√≠nimo requerido: %d unidades\n" +
                "üë®‚Äçüîß ATTP: #%d\n" +
                "üìÖ Fecha: %s\n\n" +
                "üö® ACCI√ìN REQUERIDA:\n" +
                "‚Ä¢ Gestionar reposici√≥n urgente\n" +
                "‚Ä¢ Contactar proveedores\n" +
                "‚Ä¢ Restringir pr√©stamos si es necesario\n\n" +
                "Es necesario reabastecer el inventario.",
                equipoNombre, cantidadRestante, minimoRequerido, attpId,
                java.time.LocalDate.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy")
                )
            );
            
            // Notificar urgentemente a administradores
            notificationUtil.enviarNotificacionUrgente(titulo, contenido, 1);
            
        } catch (Exception e) {
            System.err.println("Error notificando stock bajo: " + e.getMessage());
        }
    }

    // ========================================
    // M√âTODOS DE CIERRE Y LIMPIEZA
    // ========================================

    /**
     * NUEVO: M√©todo para enviar reporte de cierre de sesi√≥n
     */
    public void enviarReporteCierreSession() {
        if (!canSendNotification()) return;
        
        try {
            String titulo = "üìä Cierre de Sesi√≥n ATTP";
            String contenido = String.format(
                "Sesi√≥n ATTP finalizada:\n\n" +
                "üë®‚Äçüîß ATTP: #%d\n" +
                "üïê Hora de cierre: %s\n\n" +
                "üìà RESUMEN DE ACTIVIDADES:\n" +
                "‚Ä¢ Pr√©stamos realizados: %d\n" +
                "‚Ä¢ Devoluciones vencidas detectadas: %d\n" +
                "‚Ä¢ Equipos con problemas reportados: %d\n\n" +
                "‚úÖ Sesi√≥n cerrada correctamente.\n" +
                "Todos los registros han sido guardados.",
                attpId,
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("HH:mm:ss")
                ),
                prestamosRealizadosHoy,
                devolucionesVencidasDetectadas,
                equiposConProblemasReportados
            );
            
            // Enviar solo si hubo actividad significativa
            if (prestamosRealizadosHoy > 0 || devolucionesVencidasDetectadas > 0 || equiposConProblemasReportados > 0) {
                notificationUtil.enviarNotificacionARol(titulo, contenido, 1); // A administradores
            }
            
            System.out.println("üìä Reporte de cierre de sesi√≥n enviado");
            
        } catch (Exception e) {
            System.err.println("Error enviando reporte de cierre: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Limpia recursos y env√≠a reporte final
     */
    public void cleanup() {
        try {
            System.out.println("üßπ Limpiando recursos del AttpPanelManager...");
            
            // Enviar reporte de cierre si hubo actividad
            enviarReporteCierreSession();
            
            // Resetear estad√≠sticas
            prestamosRealizadosHoy = 0;
            devolucionesVencidasDetectadas = 0;
            equiposConProblemasReportados = 0;
            
            // Deshabilitar notificaciones
            notificationsEnabled = false;
            
            System.out.println("‚úÖ Recursos del AttpPanelManager liberados");
            
        } catch (Exception e) {
            System.err.println("Error en cleanup de AttpPanelManager: " + e.getMessage());
        }
    }

    // ========================================
    // M√âTODOS AUXILIARES FINALES
    // ========================================

    /**
     * NUEVO: Obtiene emoji apropiado seg√∫n tipo de evento
     */
    private String obtenerEmojiPorTipoEvento(String tipoEvento) {
        switch (tipoEvento.toLowerCase()) {
            case "prestamo":
            case "pr√©stamo":
                return "üíª";
            case "devolucion":
            case "devoluci√≥n":
                return "üì•";
            case "problema":
                return "‚ö†Ô∏è";
            case "mantenimiento":
                return "üîß";
            case "stock":
                return "üì¶";
            case "netbook":
                return "üíª";
            case "registro":
                return "üìù";
            default:
                return "‚ÑπÔ∏è";
        }
    }

    /**
     * NUEVO: Obtiene informaci√≥n de debug del panel manager
     */
    public String getDebugInfo() {
        StringBuilder info = new StringBuilder();
        info.append("=== ATTP Panel Manager Debug ===\n");
        info.append("ATTP ID: ").append(attpId).append("\n");
        info.append("Notificaciones habilitadas: ").append(notificationsEnabled).append("\n");
        info.append("√öltima notificaci√≥n: ").append(lastNotificationTime).append("\n");
        info.append("Pr√©stamos hoy: ").append(prestamosRealizadosHoy).append("\n");
        info.append("Devoluciones vencidas: ").append(devolucionesVencidasDetectadas).append("\n");
        info.append("Equipos con problemas: ").append(equiposConProblemasReportados).append("\n");
        info.append("Sistema notificaci√≥n activo: ").append(notificationUtil != null).append("\n");
        
        if (notificationUtil != null) {
            info.append("Puede enviar notificaciones: ").append(notificationUtil.puedeEnviarNotificaciones()).append("\n");
        }
        
        info.append("================================");
        return info.toString();
    }

    /**
     * NUEVO: M√©todo para testing del sistema de notificaciones
     */
    public void testNotificationSystem() {
        System.out.println("üß™ === TESTING SISTEMA DE NOTIFICACIONES ATTP ===");
        
        if (notificationUtil == null) {
            System.err.println("‚ùå Sistema de notificaciones no disponible");
            return;
        }
        
        try {
            // Test 1: Notificaci√≥n b√°sica
            System.out.println("Test 1: Notificaci√≥n b√°sica...");
            enviarNotificacionInicioSesion();
            Thread.sleep(2000);
            
            // Test 2: Notificaci√≥n de pr√©stamo
            System.out.println("Test 2: Notificaci√≥n de pr√©stamo...");
            notificarNuevoPrestamo(123, "Netbook Dell Inspiron", "15/06/2024");
            Thread.sleep(2000);
            
            // Test 3: Notificaci√≥n de problema
            System.out.println("Test 3: Notificaci√≥n de problema...");
            notificarProblemaEquipo(123, "Proyector Epson", "No enciende correctamente");
            Thread.sleep(2000);
            
            // Test 4: Reporte de actividad
            System.out.println("Test 4: Reporte de actividad...");
            generarReporteActividadDiaria();
            
            System.out.println("‚úÖ Testing completado exitosamente");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error durante testing: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // ========================================
    // GETTERS PARA ACCESO EXTERNO
    // ========================================

    public int getAttpId() {
        return attpId;
    }

    public VentanaInicio getVentana() {
        return ventana;
    }

    public NotificationIntegrationUtil getNotificationUtil() {
        return notificationUtil;
    }

    public boolean isNotificationsEnabled() {
        return notificationsEnabled;
    }

    public int getPrestamosRealizadosHoy() {
        return prestamosRealizadosHoy;
    }

    public int getDevolucionesVencidasDetectadas() {
        return devolucionesVencidasDetectadas;
    }

    public int getEquiposConProblemasReportados() {
        return equiposConProblemasReportados;
    }

    /**
     * NUEVO: M√©todo toString para debugging
     */
    @Override
    public String toString() {
        return String.format(
            "AttpPanelManager{attpId=%d, notificationsEnabled=%s, prestamosHoy=%d, devolucionesVencidas=%d, equiposProblemas=%d}",
            attpId, notificationsEnabled, prestamosRealizadosHoy, devolucionesVencidasDetectadas, equiposConProblemasReportados
        );
    }
}
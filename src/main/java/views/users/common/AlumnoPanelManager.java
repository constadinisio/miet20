package main.java.views.users.common;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.BorderFactory;
import javax.swing.SwingUtilities;
import main.java.views.users.common.NotasVisualizationPanel;
import main.java.views.users.common.PanelBoletinesAlumno;
import main.java.utils.NotificationIntegrationUtil;

/**
 * Gestor de paneles espec√≠fico para el rol de ALUMNO.
 * VERSI√ìN COMPLETA CON SISTEMA DE NOTIFICACIONES INTEGRADO
 * 
 * Funcionalidades del Alumno:
 * - Visualizaci√≥n de notas y calificaciones
 * - Consulta de asistencias y faltas
 * - Descarga de boletines acad√©micos
 * - Recepci√≥n de notificaciones acad√©micas
 * - Seguimiento de pr√©stamos de equipos
 * 
 * Sistema de Notificaciones para Alumnos:
 * - Recibe notificaciones sobre nuevas notas
 * - Alertas sobre faltas y problemas de asistencia
 * - Notificaciones de boletines disponibles
 * - Avisos sobre pr√©stamos y devoluciones
 * - Comunicados generales de la instituci√≥n
 * - Notificaciones de cambios acad√©micos
 * 
 * @author Sistema de Gesti√≥n Escolar ET20
 * @version 2.0 - Con Sistema de Notificaciones Completo
 */
public class AlumnoPanelManager implements RolPanelManager {

    private final VentanaInicio ventana;
    private final int alumnoId;
    private final NotificationIntegrationUtil notificationUtil;

    // Estado del alumno para notificaciones contextuales
    private String nombreCompleto = "";
    private String cursoActual = "";
    private int notificacionesNoLeidas = 0;
    private boolean primerIngreso = true;

    // Control de actividad para reportes
    private long ultimaActividad = System.currentTimeMillis();
    private int consultasNotasHoy = 0;
    private int consultasAsistenciasHoy = 0;
    private int descargasBoletinesHoy = 0;

    public AlumnoPanelManager(VentanaInicio ventana, int userId) {
        this.ventana = ventana;
        this.alumnoId = userId;
        this.notificationUtil = NotificationIntegrationUtil.getInstance();
        
        System.out.println("=== ALUMNO PANEL MANAGER INICIALIZADO ===");
        System.out.println("Alumno ID: " + alumnoId);
        System.out.println("Sistema de notificaciones: " + (notificationUtil != null ? "‚úÖ ACTIVO" : "‚ùå INACTIVO"));
        
        // Inicializar sistema espec√≠fico para alumno
        inicializarSistemaAlumno();
        
        // Cargar informaci√≥n b√°sica del alumno
        cargarInformacionAlumno();
        
        // Verificar notificaciones pendientes
        verificarNotificacionesPendientes();
    }

    /**
     * NUEVO: Inicializa el sistema espec√≠fico para alumnos
     */
    private void inicializarSistemaAlumno() {
        try {
            if (notificationUtil != null) {
                // Los alumnos generalmente no pueden enviar notificaciones, solo recibir
                System.out.println("üìß Sistema de recepci√≥n de notificaciones activado");
                
                // Obtener contador de notificaciones no le√≠das
                notificacionesNoLeidas = notificationUtil.getNotificacionesNoLeidas();
                System.out.println("üì¨ Notificaciones no le√≠das: " + notificacionesNoLeidas);
                
                // Enviar notificaci√≥n de bienvenida si es primer ingreso
                if (primerIngreso) {
                    enviarNotificacionBienvenida();
                }
                
            } else {
                System.err.println("‚ö†Ô∏è Sistema de notificaciones no disponible para alumno");
            }
        } catch (Exception e) {
            System.err.println("Error inicializando sistema alumno: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Carga informaci√≥n b√°sica del alumno
     */
    private void cargarInformacionAlumno() {
        try {
            // Aqu√≠ har√≠as consulta a BD para obtener info del alumno
            // Por ahora simulamos
            nombreCompleto = "Alumno #" + alumnoId;
            cursoActual = "4¬∞ A";
            
            System.out.println("üë®‚Äçüéì Informaci√≥n del alumno cargada: " + nombreCompleto + " - " + cursoActual);
            
        } catch (Exception e) {
            System.err.println("Error cargando informaci√≥n del alumno: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Verifica notificaciones pendientes al iniciar
     */
    private void verificarNotificacionesPendientes() {
        try {
            if (notificationUtil != null && notificacionesNoLeidas > 0) {
                // Mostrar mensaje discreto sobre notificaciones pendientes
                SwingUtilities.invokeLater(() -> {
                    mostrarMensajeNotificacionesPendientes();
                });
            }
        } catch (Exception e) {
            System.err.println("Error verificando notificaciones: " + e.getMessage());
        }
    }

    @Override
    public JComponent[] createButtons() {
        JButton btnNotas = createStyledButton("MIS NOTAS", "notas");
        JButton btnAsistencias = createStyledButton("ASISTENCIAS", "asistencias");
        JButton btnMisBoletines = createStyledButton("MIS BOLETINES", "misBoletines");
        JButton btnNotificaciones = createStyledButton("NOTIFICACIONES", "notificaciones"); // NUEVO

        return new JComponent[]{
            btnNotas,
            btnAsistencias,
            btnMisBoletines,
            btnNotificaciones
        };
    }

    private JButton createStyledButton(String text, String actionCommand) {
        JButton button = new JButton(text);
        button.setBackground(new Color(76, 175, 80)); // Verde para alumnos
        button.setFont(new Font("Arial", Font.BOLD, 14));
        button.setForeground(Color.WHITE);
        button.setActionCommand(actionCommand);
        button.addActionListener(e -> handleButtonAction(e.getActionCommand()));

        button.setMaximumSize(new Dimension(195, 40));
        button.setPreferredSize(new Dimension(195, 40));

        // NUEVO: Agregar indicador visual para notificaciones
        if ("notificaciones".equals(actionCommand) && notificacionesNoLeidas > 0) {
            button.setText(text + " (" + notificacionesNoLeidas + ")");
            button.setBackground(new Color(255, 87, 34)); // Naranja para destacar
        }

        return button;
    }

    @Override
    public void handleButtonAction(String actionCommand) {
        try {
            System.out.println("=== ACCI√ìN ALUMNO: " + actionCommand + " ===");
            
            // Registrar actividad
            registrarActividad(actionCommand);
            
            switch (actionCommand) {
                case "notas":
                    mostrarNotasAlumno();
                    break;
                case "asistencias":
                    mostrarAsistencias();
                    break;
                case "misBoletines":
                    mostrarMisBoletines();
                    break;
                case "notificaciones": // NUEVO
                    mostrarNotificaciones();
                    break;
                default:
                    ventana.restaurarVistaPrincipal();
                    break;
            }
        } catch (Exception ex) {
            System.err.println("‚ùå Error en AlumnoPanelManager: " + ex.getMessage());
            ex.printStackTrace();
            
            // Notificar error discretamente
            notificarErrorInterno(actionCommand, ex.getMessage());
            
            JOptionPane.showMessageDialog(ventana,
                    "Error al cargar la vista: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            
            ventana.restaurarVistaPrincipal();
        }
    }

    /**
     * M√âTODO MEJORADO: Muestra las notas del alumno con seguimiento
     */
    private void mostrarNotasAlumno() {
        try {
            System.out.println("Creando NotasVisualizationPanel para alumno ID: " + alumnoId);
            consultasNotasHoy++;

            NotasVisualizationPanel panelNotas = 
                new NotasVisualizationPanel(ventana, alumnoId, 4); // rol 4 = alumno

            ventana.mostrarPanelResponsive(panelNotas, "Mis Notas");
            
            System.out.println("‚úÖ Panel de notas del alumno mostrado exitosamente");

            // NUEVO: Registrar consulta de notas
            registrarConsultaNotas();

        } catch (Exception ex) {
            System.err.println("‚ùå Error al mostrar notas del alumno: " + ex.getMessage());
            ex.printStackTrace();
            throw ex;
        }
    }

    /**
     * M√âTODO MEJORADO: Muestra las asistencias con seguimiento
     */
    private void mostrarAsistencias() {
        try {
            System.out.println("Creando panel de asistencias para alumno ID: " + alumnoId);
            consultasAsistenciasHoy++;

            // Crear panel temporal mejorado con m√°s informaci√≥n
            JPanel panelAsistencias = crearPanelAsistenciasMejorado();
            
            ventana.mostrarPanelResponsive(panelAsistencias, "Mis Asistencias");
            
            System.out.println("‚úÖ Panel de asistencias mostrado exitosamente");

            // NUEVO: Registrar consulta de asistencias
            registrarConsultaAsistencias();

        } catch (Exception ex) {
            System.err.println("‚ùå Error al mostrar asistencias: " + ex.getMessage());
            ex.printStackTrace();
            throw ex;
        }
    }

    /**
     * M√âTODO MEJORADO: Muestra los boletines con seguimiento de descargas
     */
    private void mostrarMisBoletines() {
        try {
            System.out.println("Creando PanelBoletinesAlumno para alumno ID: " + alumnoId);

            PanelBoletinesAlumno panelMisBoletines = 
                new PanelBoletinesAlumno(ventana, alumnoId);

            // NUEVO: Configurar callback para seguimiento de descargas
            configurarSeguimientoBoletines(panelMisBoletines);

            ventana.mostrarPanelResponsive(panelMisBoletines, "Mis Boletines");
            
            System.out.println("‚úÖ Panel de mis boletines mostrado exitosamente");

        } catch (Exception ex) {
            System.err.println("‚ùå Error al mostrar mis boletines: " + ex.getMessage());
            ex.printStackTrace();
            throw ex;
        }
    }

    /**
     * NUEVO: Muestra el panel de notificaciones del alumno
     */
    private void mostrarNotificaciones() {
        try {
            System.out.println("Abriendo centro de notificaciones para alumno ID: " + alumnoId);

            // Abrir ventana de notificaciones
            if (ventana.isNotificationSystemActive()) {
                main.java.views.notifications.NotificationsWindow notifWindow = 
                    new main.java.views.notifications.NotificationsWindow(alumnoId);
                notifWindow.setVisible(true);
                
                // Actualizar contador despu√©s de abrir
                SwingUtilities.invokeLater(() -> {
                    actualizarContadorNotificaciones();
                });
                
            } else {
                // Crear panel temporal si el sistema no est√° disponible
                JPanel panelNotificaciones = crearPanelNotificacionesTemporal();
                ventana.mostrarPanelResponsive(panelNotificaciones, "Mis Notificaciones");
            }
            
            System.out.println("‚úÖ Centro de notificaciones abierto");

        } catch (Exception ex) {
            System.err.println("‚ùå Error al abrir notificaciones: " + ex.getMessage());
            ex.printStackTrace();
            
            // Mostrar panel de error amigable
            JPanel panelError = crearPanelErrorNotificaciones(ex.getMessage());
            ventana.mostrarPanelResponsive(panelError, "Notificaciones - Error");
        }
    }

    // ========================================
    // M√âTODOS DE PANELES MEJORADOS
    // ========================================

    /**
     * MEJORADO: Crea un panel de asistencias m√°s informativo
     */
    private JPanel crearPanelAsistenciasMejorado() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        panel.setBackground(Color.WHITE);

        // Header con informaci√≥n del alumno
        JPanel headerPanel = crearHeaderAlumno("Mis Asistencias", "üìä");
        panel.add(headerPanel, BorderLayout.NORTH);

        // Panel central con informaci√≥n simulada
        JPanel panelCentral = new JPanel(new GridBagLayout());
        panelCentral.setBackground(Color.WHITE);
        panelCentral.setBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);

        // Estad√≠sticas simuladas
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        JLabel lblEstadisticas = new JLabel("<html><h2>üìà Resumen de Asistencia</h2></html>");
        lblEstadisticas.setFont(new Font("Arial", Font.BOLD, 18));
        panelCentral.add(lblEstadisticas, gbc);

        // Informaci√≥n simulada
        String[] stats = {
            "‚úÖ D√≠as asistidos: 85%",
            "‚ùå Faltas: 12 d√≠as",
            "‚è∞ Tardanzas: 3",
            "üìÖ √öltimo per√≠odo: Mayo 2025"
        };

        for (int i = 0; i < stats.length; i++) {
            gbc.gridx = 0; gbc.gridy = i + 2; gbc.gridwidth = 1;
            JLabel lbl = new JLabel(stats[i]);
            lbl.setFont(new Font("Arial", Font.PLAIN, 16));
            panelCentral.add(lbl, gbc);
        }

        // Mensaje informativo
        gbc.gridx = 0; gbc.gridy = 7; gbc.gridwidth = 2;
        JTextArea txtInfo = new JTextArea(
            "La funcionalidad completa de visualizaci√≥n de asistencias estar√° disponible pr√≥ximamente.\n\n" +
            "Mientras tanto, puedes consultar con tu preceptor sobre tu situaci√≥n acad√©mica espec√≠fica.\n\n" +
            "Las notificaciones sobre faltas y problemas de asistencia se enviar√°n autom√°ticamente."
        );
        txtInfo.setEditable(false);
        txtInfo.setOpaque(false);
        txtInfo.setWrapStyleWord(true);
        txtInfo.setLineWrap(true);
        txtInfo.setFont(new Font("Arial", Font.ITALIC, 14));
        panelCentral.add(txtInfo, gbc);

        panel.add(panelCentral, BorderLayout.CENTER);

        // Footer con botones
        JPanel footerPanel = crearFooterBotones();
        panel.add(footerPanel, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * NUEVO: Crea panel temporal para notificaciones
     */
    private JPanel crearPanelNotificacionesTemporal() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        panel.setBackground(Color.WHITE);

        // Header
        JPanel headerPanel = crearHeaderAlumno("Mis Notificaciones", "üîî");
        panel.add(headerPanel, BorderLayout.NORTH);

        // Contenido central
        JPanel panelCentral = new JPanel(new GridBagLayout());
        panelCentral.setBackground(Color.WHITE);
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(20, 20, 20, 20);

        JLabel lblMensaje = new JLabel(
            "<html><div style='text-align: center;'>" +
            "<h2>üîî Centro de Notificaciones</h2>" +
            "<p>El sistema de notificaciones no est√° completamente disponible en este momento.</p>" +
            "<br>" +
            "<p><b>Notificaciones que recibes autom√°ticamente:</b></p>" +
            "<ul>" +
            "<li>üìä Nuevas notas publicadas</li>" +
            "<li>üìã Boletines disponibles</li>" +
            "<li>‚ö†Ô∏è Alertas de asistencia</li>" +
            "<li>üíª Avisos sobre pr√©stamos</li>" +
            "<li>üì¢ Comunicados institucionales</li>" +
            "</ul>" +
            "<br>" +
            "<p><i>Las notificaciones aparecen en la campanita del men√∫ superior.</i></p>" +
            "</div></html>"
        );
        lblMensaje.setFont(new Font("Arial", Font.PLAIN, 14));
        panelCentral.add(lblMensaje, gbc);

        panel.add(panelCentral, BorderLayout.CENTER);

        // Footer
        JPanel footerPanel = crearFooterBotones();
        panel.add(footerPanel, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * NUEVO: Crea panel de error para notificaciones
     */
    private JPanel crearPanelErrorNotificaciones(String errorMsg) {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        panel.setBackground(Color.WHITE);

        // Header
        JPanel headerPanel = crearHeaderAlumno("Notificaciones - Error", "‚ùå");
        panel.add(headerPanel, BorderLayout.NORTH);

        // Error info
        JPanel panelCentral = new JPanel(new GridBagLayout());
        panelCentral.setBackground(Color.WHITE);
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(30, 30, 30, 30);

        JLabel lblError = new JLabel(
            "<html><div style='text-align: center;'>" +
            "<h2>‚ùå Error en el Sistema de Notificaciones</h2>" +
            "<p>No se pudo acceder al centro de notificaciones en este momento.</p>" +
            "<br>" +
            "<p><b>Error t√©cnico:</b> " + errorMsg + "</p>" +
            "<br>" +
            "<p>Por favor, intenta nuevamente m√°s tarde o contacta al administrador del sistema.</p>" +
            "</div></html>"
        );
        lblError.setFont(new Font("Arial", Font.PLAIN, 14));
        panelCentral.add(lblError, gbc);

        panel.add(panelCentral, BorderLayout.CENTER);

        // Footer
        JPanel footerPanel = crearFooterBotones();
        panel.add(footerPanel, BorderLayout.SOUTH);

        return panel;
    }

    /**
     * NUEVO: Crea header personalizado para paneles del alumno
     */
    private JPanel crearHeaderAlumno(String titulo, String emoji) {
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setBackground(new Color(76, 175, 80));
        headerPanel.setBorder(BorderFactory.createEmptyBorder(15, 20, 15, 20));

        JLabel lblTitulo = new JLabel(emoji + " " + titulo);
        lblTitulo.setFont(new Font("Arial", Font.BOLD, 24));
        lblTitulo.setForeground(Color.WHITE);

        JLabel lblAlumno = new JLabel("üë®‚Äçüéì " + nombreCompleto + " - " + cursoActual);
        lblAlumno.setFont(new Font("Arial", Font.PLAIN, 16));
        lblAlumno.setForeground(Color.WHITE);

        headerPanel.add(lblTitulo, BorderLayout.WEST);
        headerPanel.add(lblAlumno, BorderLayout.EAST);

        return headerPanel;
    }

    /**
     * NUEVO: Crea footer con botones est√°ndar
     */
    private JPanel crearFooterBotones() {
        JPanel footerPanel = new JPanel(new FlowLayout());
        footerPanel.setBackground(Color.WHITE);
        footerPanel.setBorder(BorderFactory.createEmptyBorder(20, 0, 0, 0));

        JButton btnVolver = new JButton("üè† Volver al Inicio");
        btnVolver.setBackground(new Color(96, 125, 139));
        btnVolver.setForeground(Color.WHITE);
        btnVolver.setFont(new Font("Arial", Font.BOLD, 14));
        btnVolver.addActionListener(e -> ventana.restaurarVistaPrincipal());

        JButton btnActualizar = new JButton("üîÑ Actualizar");
        btnActualizar.setBackground(new Color(33, 150, 243));
        btnActualizar.setForeground(Color.WHITE);
        btnActualizar.setFont(new Font("Arial", Font.BOLD, 14));
        btnActualizar.addActionListener(e -> actualizarDatos());

        footerPanel.add(btnVolver);
        footerPanel.add(btnActualizar);

        return footerPanel;
    }

    // ========================================
    // M√âTODOS DE NOTIFICACIONES ESPEC√çFICAS
    // ========================================

    /**
     * NUEVO: Env√≠a notificaci√≥n de bienvenida al alumno
     */
    private void enviarNotificacionBienvenida() {
        try {
            // Solo enviar bienvenida si el sistema est√° activo y es realmente primer ingreso
            if (notificationUtil != null && primerIngreso) {
                
                // Usar m√©todo interno de VentanaInicio para enviar notificaci√≥n
                String titulo = "üéì ¬°Bienvenido al Sistema Acad√©mico!";
                String contenido = String.format(
                    "Hola %s, bienvenido al Sistema de Gesti√≥n Escolar ET20.\n\n" +
                    "üìö FUNCIONES DISPONIBLES:\n" +
                    "‚Ä¢ Consultar tus notas y calificaciones\n" +
                    "‚Ä¢ Revisar tu asistencia y faltas\n" +
                    "‚Ä¢ Descargar tus boletines acad√©micos\n" +
                    "‚Ä¢ Recibir notificaciones importantes\n\n" +
                    "üîî NOTIFICACIONES AUTOM√ÅTICAS:\n" +
                    "Recibir√°s avisos sobre nuevas notas, problemas de asistencia, " +
                    "boletines disponibles y comunicados importantes.\n\n" +
                    "¬°Que tengas un excelente per√≠odo acad√©mico! üìñ‚ú®",
                    nombreCompleto
                );
                
                ventana.enviarNotificacionInterna(titulo, contenido, alumnoId);
                primerIngreso = false;
                
                System.out.println("‚úÖ Notificaci√≥n de bienvenida enviada al alumno");
            }
        } catch (Exception e) {
            System.err.println("Error enviando bienvenida: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Muestra mensaje discreto sobre notificaciones pendientes
     */
    private void mostrarMensajeNotificacionesPendientes() {
        try {
            int opcion = JOptionPane.showOptionDialog(
                ventana,
                String.format(
                    "üì¨ Tienes %d notificaci√≥n%s pendiente%s.\n\n" +
                    "¬øDeseas revisar tus notificaciones ahora?",
                    notificacionesNoLeidas,
                    notificacionesNoLeidas == 1 ? "" : "es",
                    notificacionesNoLeidas == 1 ? "" : "s"
                ),
                "Notificaciones Pendientes",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null,
                new Object[]{"üì± Ver Notificaciones", "‚è∞ M√°s Tarde"},
                "üì± Ver Notificaciones"
            );

            if (opcion == 0) { // Ver notificaciones
                mostrarNotificaciones();
            }
        } catch (Exception e) {
            System.err.println("Error mostrando mensaje de notificaciones: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Notifica error interno discretamente
     */
    private void notificarErrorInterno(String accion, String error) {
        try {
            // Solo notificar errores cr√≠ticos, no saturar al alumno
            if (error.toLowerCase().contains("cr√≠tico") || error.toLowerCase().contains("conexi√≥n")) {
                System.err.println("üö® Error cr√≠tico para alumno " + alumnoId + " en acci√≥n: " + accion);
                
                // Aqu√≠ podr√≠as enviar el error a administradores si es necesario
                // pero evitar molestar al alumno con errores t√©cnicos
            }
        } catch (Exception e) {
            System.err.println("Error notificando error interno: " + e.getMessage());
        }
    }

    // ========================================
    // M√âTODOS DE SEGUIMIENTO Y ESTAD√çSTICAS
    // ========================================

    /**
     * NUEVO: Registra actividad del alumno
     */
    private void registrarActividad(String accion) {
        try {
            ultimaActividad = System.currentTimeMillis();
            System.out.println("üìù Actividad registrada - Alumno " + alumnoId + ": " + accion);
            
            // Aqu√≠ podr√≠as guardar la actividad en BD para estad√≠sticas
            
        } catch (Exception e) {
            System.err.println("Error registrando actividad: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Registra consulta de notas
     */
    private void registrarConsultaNotas() {
        try {
            System.out.println("üìä Consulta de notas registrada - Total hoy: " + consultasNotasHoy);
            
            // Si es la primera consulta del d√≠a, podr√≠amos enviar tips o recordatorios
            if (consultasNotasHoy == 1) {
                enviarTipEstudio();
            }
            
        } catch (Exception e) {
            System.err.println("Error registrando consulta de notas: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Registra consulta de asistencias
     */
    private void registrarConsultaAsistencias() {
        try {
            System.out.println("üìÖ Consulta de asistencias registrada - Total hoy: " + consultasAsistenciasHoy);
            
        } catch (Exception e) {
            System.err.println("Error registrando consulta de asistencias: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Configura seguimiento de descargas de boletines
     */
    private void configurarSeguimientoBoletines(PanelBoletinesAlumno panel) {
        try {
            // Aqu√≠ configurar√≠as callbacks en el panel de boletines
            // para detectar cuando se descarga un bolet√≠n
            System.out.println("üìã Configurando seguimiento de boletines para alumno " + alumnoId);
            
            // Ejemplo de callback que podr√≠as implementar:
            // panel.setOnBoletinDescargadoCallback(this::registrarDescargaBoletin);
            
        } catch (Exception e) {
            System.err.println("Error configurando seguimiento de boletines: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Registra descarga de bolet√≠n
     */
    public void registrarDescargaBoletin(String periodo, String archivo) {
        try {
            descargasBoletinesHoy++;
            System.out.println("üì• Descarga de bolet√≠n registrada: " + periodo + " - Total hoy: " + descargasBoletinesHoy);
            
            // Enviar confirmaci√≥n de descarga
            enviarConfirmacionDescarga(periodo, archivo);
            
        } catch (Exception e) {
            System.err.println("Error registrando descarga de bolet√≠n: " + e.getMessage());
        }
    }

    // ========================================
    // M√âTODOS DE NOTIFICACIONES √öTILES
    // ========================================

    /**
     * NUEVO: Env√≠a tip de estudio ocasional
     */
    private void enviarTipEstudio() {
        try {
            if (notificationUtil == null) return;
            
            String[] tips = {
                "üí° Tip de Estudio: Revisa tus notas regularmente para identificar materias que necesitan m√°s atenci√≥n.",
                "üìö Recordatorio: Un buen m√©todo de estudio es repasar 15 minutos cada d√≠a en lugar de estudiar todo de una vez.",
                "üéØ Consejo: Si tienes dudas sobre alguna materia, no dudes en consultar con tus profesores.",
                "‚è∞ Organizaci√≥n: Crear un horario de estudio te ayudar√° a distribuir mejor tu tiempo.",
                "üß† T√©cnica: Explicar lo que estudias a otra persona te ayuda a consolidar el conocimiento."
            };
            
            // Enviar tip aleatorio ocasionalmente (no siempre)
            if (Math.random() < 0.3) { // 30% de probabilidad
                String tipSeleccionado = tips[(int) (Math.random() * tips.length)];
                
                ventana.enviarNotificacionInterna(
                    "üìñ Tip Acad√©mico",
                    tipSeleccionado + "\n\n¬°Sigue as√≠ con tu excelente trabajo acad√©mico! üåü",
                    alumnoId
                );
            }
            
        } catch (Exception e) {
            System.err.println("Error enviando tip de estudio: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Env√≠a confirmaci√≥n de descarga de bolet√≠n
     */
    private void enviarConfirmacionDescarga(String periodo, String archivo) {
        try {
            if (notificationUtil == null) return;
            
            String titulo = "üì• Bolet√≠n Descargado";
            String contenido = String.format(
                "Tu bolet√≠n ha sido descargado exitosamente:\n\n" +
                "üìã Per√≠odo: %s\n" +
                "üìÅ Archivo: %s\n" +
                "üìÖ Fecha de descarga: %s\n\n" +
                "üí° RECOMENDACIONES:\n" +
                "‚Ä¢ Guarda el archivo en un lugar seguro\n" +
                "‚Ä¢ Revisa tus calificaciones con atenci√≥n\n" +
                "‚Ä¢ Consulta con tus padres/tutores\n" +
                "‚Ä¢ Si hay dudas, habla con tu preceptor\n\n" +
                "¬°Sigue esforz√°ndote por mejores resultados! üéì",
                periodo, archivo,
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")
                )
            );
            
            ventana.enviarNotificacionInterna(titulo, contenido, alumnoId);
            
        } catch (Exception e) {
            System.err.println("Error enviando confirmaci√≥n de descarga: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Actualiza el contador de notificaciones
     */
    private void actualizarContadorNotificaciones() {
        try {
            if (notificationUtil != null) {
                int nuevasNoLeidas = notificationUtil.getNotificacionesNoLeidas();
                if (nuevasNoLeidas != notificacionesNoLeidas) {
                    notificacionesNoLeidas = nuevasNoLeidas;
                    System.out.println("üì¨ Contador de notificaciones actualizado: " + notificacionesNoLeidas);
                    
                    // Actualizar bot√≥n de notificaciones si es necesario
                    // Esto requerir√≠a reconfigurar el panel de botones
                }
            }
        } catch (Exception e) {
            System.err.println("Error actualizando contador: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Actualiza datos del alumno
     */
    private void actualizarDatos() {
        try {
            System.out.println("üîÑ Actualizando datos del alumno...");
            
            // Recargar informaci√≥n b√°sica
            cargarInformacionAlumno();
            
            // Actualizar notificaciones
            actualizarContadorNotificaciones();
            
            // Mostrar mensaje de confirmaci√≥n
            JOptionPane.showMessageDialog(
                ventana,
                "‚úÖ Datos actualizados correctamente.\n\n" +
                "üìä Informaci√≥n acad√©mica: Actualizada\n" +
                "üîî Notificaciones: Sincronizadas\n" +
                "üìÖ √öltima actualizaci√≥n: " + 
                java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss")
                ),
                "Actualizaci√≥n Completada",
                JOptionPane.INFORMATION_MESSAGE
            );
            
        } catch (Exception e) {
            System.err.println("Error actualizando datos: " + e.getMessage());
            JOptionPane.showMessageDialog(
                ventana,
                "‚ùå Error al actualizar los datos:\n" + e.getMessage(),
                "Error de Actualizaci√≥n",
                JOptionPane.ERROR_MESSAGE
            );
        }
    }

    // ========================================
    // M√âTODOS P√öBLICOS PARA NOTIFICACIONES EXTERNAS
    // ========================================

    /**
     * NUEVO: M√©todo p√∫blico para que el sistema notifique nueva nota al alumno
     */
    public void recibirNotificacionNuevaNota(String materia, String tipoTrabajo, double nota, String profesorNombre) {
        try {
            System.out.println("üìä Nueva nota recibida para alumno " + alumnoId + ": " + nota);
            
            // La notificaci√≥n la env√≠a el sistema autom√°ticamente
            // Aqu√≠ solo registramos que se recibi√≥
            registrarEventoAcademico("NUEVA_NOTA", materia + " - " + tipoTrabajo + ": " + nota);
            
        } catch (Exception e) {
            System.err.println("Error procesando notificaci√≥n de nota: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo p√∫blico para recibir notificaci√≥n de asistencia
     */
    public void recibirNotificacionAsistencia(String fecha, String materia, String tipoFalta) {
        try {
            System.out.println("üìÖ Notificaci√≥n de asistencia para alumno " + alumnoId + ": " + tipoFalta);
            
            registrarEventoAcademico("ASISTENCIA", fecha + " - " + materia + ": " + tipoFalta);
            
            // Si es falta, podr√≠as mostrar mensaje adicional o tip
            if ("FALTA".equalsIgnoreCase(tipoFalta)) {
                enviarReminderAsistencia();
            }
            
        } catch (Exception e) {
            System.err.println("Error procesando notificaci√≥n de asistencia: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo p√∫blico para recibir notificaci√≥n de bolet√≠n disponible
     */
    public void recibirNotificacionBoletin(String periodo) {
        try {
            System.out.println("üìã Bolet√≠n disponible para alumno " + alumnoId + ": " + periodo);
            
            registrarEventoAcademico("BOLETIN_DISPONIBLE", "Per√≠odo: " + periodo);
            
            // Mostrar notificaci√≥n discreta en la UI si el alumno est√° activo
            mostrarNotificacionBoletin(periodo);
            
        } catch (Exception e) {
            System.err.println("Error procesando notificaci√≥n de bolet√≠n: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo p√∫blico para recibir notificaci√≥n de pr√©stamo
     */
    public void recibirNotificacionPrestamo(String equipoNombre, String fechaDevolucion, String attpNombre) {
        try {
            System.out.println("üíª Notificaci√≥n de pr√©stamo para alumno " + alumnoId + ": " + equipoNombre);
            
            registrarEventoAcademico("PRESTAMO", equipoNombre + " - Devoluci√≥n: " + fechaDevolucion);
            
        } catch (Exception e) {
            System.err.println("Error procesando notificaci√≥n de pr√©stamo: " + e.getMessage());
        }
    }

    // ========================================
    // M√âTODOS AUXILIARES Y DE SOPORTE
    // ========================================

    /**
     * NUEVO: Registra eventos acad√©micos del alumno
     */
    private void registrarEventoAcademico(String tipoEvento, String descripcion) {
        try {
            System.out.println("üìù Evento acad√©mico - " + tipoEvento + ": " + descripcion);
            
            // Aqu√≠ podr√≠as guardar en BD el historial de eventos del alumno
            // Para estad√≠sticas y seguimiento acad√©mico
            
        } catch (Exception e) {
            System.err.println("Error registrando evento acad√©mico: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Env√≠a reminder sobre asistencia
     */
    private void enviarReminderAsistencia() {
        try {
            if (notificationUtil == null) return;
            
            // Solo enviar ocasionalmente para no saturar
            if (Math.random() < 0.2) { // 20% de probabilidad
                String titulo = "üìÖ Recordatorio de Asistencia";
                String contenido = 
                    "Hemos registrado una falta en tu asistencia.\n\n" +
                    "üìö IMPORTANCIA DE LA ASISTENCIA:\n" +
                    "‚Ä¢ La asistencia regular mejora tu rendimiento\n" +
                    "‚Ä¢ Es requisito para la promoci√≥n\n" +
                    "‚Ä¢ Te mantiene al d√≠a con las clases\n\n" +
                    "üí° Si tienes problemas para asistir, habla con tu preceptor.\n" +
                    "¬°Tu educaci√≥n es importante! üéì";
                
                ventana.enviarNotificacionInterna(titulo, contenido, alumnoId);
            }
            
        } catch (Exception e) {
            System.err.println("Error enviando reminder de asistencia: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Muestra notificaci√≥n visual de bolet√≠n disponible
     */
    private void mostrarNotificacionBoletin(String periodo) {
        try {
            SwingUtilities.invokeLater(() -> {
                int opcion = JOptionPane.showOptionDialog(
                    ventana,
                    String.format(
                        "üìã ¬°Tu bolet√≠n del %s ya est√° disponible!\n\n" +
                        "¬øDeseas descargarlo ahora?",
                        periodo
                    ),
                    "Bolet√≠n Disponible",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    new Object[]{"üì• Descargar Ahora", "‚è∞ M√°s Tarde"},
                    "üì• Descargar Ahora"
                );

                if (opcion == 0) { // Descargar ahora
                    mostrarMisBoletines();
                }
            });
        } catch (Exception e) {
            System.err.println("Error mostrando notificaci√≥n de bolet√≠n: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Obtiene estad√≠sticas de actividad del alumno
     */
    public String getEstadisticasActividad() {
        StringBuilder stats = new StringBuilder();
        stats.append("=== ESTAD√çSTICAS DEL ALUMNO ===\n");
        stats.append("üë®‚Äçüéì Alumno: ").append(nombreCompleto).append("\n");
        stats.append("üéì Curso: ").append(cursoActual).append("\n");
        stats.append("üìß Notificaciones no le√≠das: ").append(notificacionesNoLeidas).append("\n");
        stats.append("‚è∞ √öltima actividad: ").append(
            java.time.Instant.ofEpochMilli(ultimaActividad).toString()
        ).append("\n");
        stats.append("üìä Consultas de notas hoy: ").append(consultasNotasHoy).append("\n");
        stats.append("üìÖ Consultas de asistencias hoy: ").append(consultasAsistenciasHoy).append("\n");
        stats.append("üìã Descargas de boletines hoy: ").append(descargasBoletinesHoy).append("\n");
        stats.append("===================================");
        return stats.toString();
    }

    /**
     * NUEVO: M√©todo de testing espec√≠fico para alumnos
     */
    public void testAlumnoNotifications() {
        System.out.println("üß™ === TESTING NOTIFICACIONES ALUMNO ===");
        
        try {
            // Test 1: Notificaci√≥n de nueva nota
            System.out.println("Test 1: Nueva nota...");
            recibirNotificacionNuevaNota("Matem√°tica", "Examen", 8.5, "Prof. Garc√≠a");
            Thread.sleep(1000);
            
            // Test 2: Notificaci√≥n de asistencia
            System.out.println("Test 2: Asistencia...");
            recibirNotificacionAsistencia("29/05/2025", "Historia", "PRESENTE");
            Thread.sleep(1000);
            
            // Test 3: Notificaci√≥n de bolet√≠n
            System.out.println("Test 3: Bolet√≠n disponible...");
            recibirNotificacionBoletin("1er Trimestre 2025");
            Thread.sleep(1000);
            
            // Test 4: Notificaci√≥n de pr√©stamo
            System.out.println("Test 4: Pr√©stamo...");
            recibirNotificacionPrestamo("Netbook Dell", "05/06/2025", "ATTP L√≥pez");
            Thread.sleep(1000);
            
            // Test 5: Tip de estudio
            System.out.println("Test 5: Tip de estudio...");
            enviarTipEstudio();
            
            System.out.println("‚úÖ Testing de alumno completado");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en testing: " + e.getMessage());
        }
    }

    /**
     * NUEVO: M√©todo de limpieza de recursos
     */
    public void cleanup() {
        try {
            System.out.println("üßπ Limpiando recursos del AlumnoPanelManager...");
            
            // Enviar estad√≠sticas finales si hubo actividad significativa
            if (consultasNotasHoy > 0 || consultasAsistenciasHoy > 0 || descargasBoletinesHoy > 0) {
                enviarReporteActividadFinal();
            }
            
            // Resetear contadores
            consultasNotasHoy = 0;
            consultasAsistenciasHoy = 0;
            descargasBoletinesHoy = 0;
            notificacionesNoLeidas = 0;
            
            System.out.println("‚úÖ Recursos del AlumnoPanelManager liberados");
            
        } catch (Exception e) {
            System.err.println("Error en cleanup de AlumnoPanelManager: " + e.getMessage());
        }
    }

    /**
     * NUEVO: Env√≠a reporte de actividad final (opcional)
     */
    private void enviarReporteActividadFinal() {
        try {
            if (notificationUtil != null) {
                String titulo = "üìä Resumen de Actividad";
                String contenido = String.format(
                    "Resumen de tu actividad acad√©mica de hoy:\n\n" +
                    "üìä Consultas de notas: %d\n" +
                    "üìÖ Consultas de asistencia: %d\n" +
                    "üìã Descargas de boletines: %d\n\n" +
                    "¬°Excelente participaci√≥n en el sistema acad√©mico!\n" +
                    "Sigue manteniendo este seguimiento de tu progreso. üåü",
                    consultasNotasHoy, consultasAsistenciasHoy, descargasBoletinesHoy
                );
                
                // Solo enviar si hubo actividad significativa
                if (consultasNotasHoy >= 3 || descargasBoletinesHoy > 0) {
                    ventana.enviarNotificacionInterna(titulo, contenido, alumnoId);
                }
            }
        } catch (Exception e) {
            System.err.println("Error enviando reporte final: " + e.getMessage());
        }
    }

    // ========================================
    // GETTERS Y M√âTODOS DE ACCESO
    // ========================================

    public int getAlumnoId() {
        return alumnoId;
    }

    public VentanaInicio getVentana() {
        return ventana;
    }

    public NotificationIntegrationUtil getNotificationUtil() {
        return notificationUtil;
    }

    public String getNombreCompleto() {
        return nombreCompleto;
    }

    public String getCursoActual() {
        return cursoActual;
    }

    public int getNotificacionesNoLeidas() {
        return notificacionesNoLeidas;
    }

    public int getConsultasNotasHoy() {
        return consultasNotasHoy;
    }

    public int getConsultasAsistenciasHoy() {
        return consultasAsistenciasHoy;
    }

    public int getDescargasBoletinesHoy() {
        return descargasBoletinesHoy;
    }

    /**
     * NUEVO: M√©todo toString para debugging
     */
    @Override
    public String toString() {
        return String.format(
            "AlumnoPanelManager{alumnoId=%d, nombre='%s', curso='%s', notificacionesNoLeidas=%d, consultasNotas=%d}",
            alumnoId, nombreCompleto, cursoActual, notificacionesNoLeidas, consultasNotasHoy
        );
    }
}